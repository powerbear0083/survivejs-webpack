import webpack from 'webpack';
declare type Attributes = Record<string, any>;
declare type Context = {
    title?: string;
    htmlAttributes?: Attributes;
    cssAttributes?: Attributes;
    jsAttributes?: Attributes;
};
declare type Options = {
    filename?: string;
    publicPath?: string;
    context?: Context;
    template?: (args: Context & Files & {
        publicPath: string;
    }) => string | Promise<string>;
    chunks?: string[];
};
declare type Files = {
    [id: string]: string[];
};
declare function generateAttributes(attributes?: {}): string;
declare function generateCSSReferences({ files, publicPath, attributes, }: {
    files: string[];
    publicPath: string;
    attributes: (Attributes & {
        rel?: string;
    }) | undefined;
}): string;
declare function generateJSReferences({ files, publicPath, attributes, }: {
    files: string[];
    publicPath: string;
    attributes: Attributes | undefined;
}): string;
declare function defaultTemplate({ css, js, publicPath, title, htmlAttributes, head, body, cssAttributes, jsAttributes, }: {
    css?: never[] | undefined;
    js?: never[] | undefined;
    publicPath?: string | undefined;
    title?: string | undefined;
    htmlAttributes?: {
        lang: string;
    } | undefined;
    head?: string | undefined;
    body?: string | undefined;
    cssAttributes?: {} | undefined;
    jsAttributes?: {} | undefined;
}): string;
declare class MiniHtmlWebpackPlugin implements webpack.Plugin {
    private options;
    constructor(options: Options);
    private plugin;
    apply(compiler: webpack.Compiler): void;
}
export { MiniHtmlWebpackPlugin, defaultTemplate, generateAttributes, generateCSSReferences, generateJSReferences, };
